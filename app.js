const md5 = require('md5');
const btoa = require('btoa');
var forge = require('node-forge');
var fs = require('fs');
var certs = require('./digital-certs/certs');
const https = require('https');

/*
Private key is extracted. 
We need to use it to sign the headers (which must be constructed first):

1. (request-target)
The `(request-target)` header field is a special header field in that its value is comprised of 2 HTTP headers. It is generated by concatenating the lowercase HTTP method, an ASCII space, and the
request path headers. See below for sample

(request-target): post /v1/rest/rpn/{ employerRegistrationNumber }/{taxYear}

2. host
www.ros.ie (is this the live host? )


3. date
*/

// Signature Header Components

var header = {};
var signatureString; // string to be signed consists of all the above header fields
var signature;

// Fetch the digital certificate from the certs array

var cert = certs.find(c => c.id == '999963666'); // or 999963665

console.log(cert.id + ' ' + cert.epn);

// Set the Header component values

//HTTP://softwaretest.ros.ie/paye-employers/v1/rest/rpn/{employerRegistrationNumber}/{taxYear}

header.requestTarget = "/paye-employers/v1/rest/rpn/" + getRequestTarget(cert.epn, 2018);
header.path = header.requestTarget;
console.log(header.path);
header.host = 'softwaretest.ros.ie';
header.date = new Date().toUTCString();
header.contentType = 'application/json;charset=UTF-8';
header.protocol = 'https:';
header.method = 'GET';

header.digest = ''; // How to get this?

signatureString = getSignatureString(header);

// Logging Header component values
console.log(signatureString);


// Get the private key from the cert

// Get the MD5 hash of the password
var hashed = btoa(hex2a(md5(cert.password))); // md5 src: http://stackoverflow.com/a/33486055/7519287

// console.log(hashed);

var pk = extractPrivateKey(hashed, cert.id);

https.get('https://softwaretest.ros.ie/paye-employers/v1/rest/rpn/8000135UH/2018', (resp) => {
  let data = '';
 
  // A chunk of data has been recieved.
  resp.on('data', (chunk) => {
    data += chunk;
  });
 
  // The whole response has been received. Print out the result.
  resp.on('end', () => {
    console.log(data);
  });
 
}).on("error", (err) => {
  console.log("Error: " + err.message);
});
/*
var y = https.request('https://softwaretest.ros.ie/paye-employers/v1/rest/rpn/8000135UH/2018', function(res){
  console.log("Connected");
  res.on('data',function(data){
    console.log(data);
  });
});
/*
var x = https.request(header,function(res){
  console.log("Connected");
  res.on('data',function(data){
    console.log(data);
  });
});
x.end();
*/
// console.log(pk);

// scr: http://stackoverflow.com/questions/37833952/getting-the-private-key-from-p12-file-using-javascript
function extractPrivateKey(pwd, certId) {
  var keyFile = fs.readFileSync('digital-certs/' + certId + '.p12');
  var keyBase64 = keyFile.toString('base64');

  var p12Der = forge.util.decode64(keyBase64);

  var p12Asn1 = forge.asn1.fromDer(p12Der);
  var p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, pwd);
  //http://stackoverflow.com/questions/17182848/best-approch-to-decode-the-pkcs12-file-and-get-the-encrypted-private-key-from-it
  // get bags by type
  var certBags = p12.getBags({ bagType: forge.pki.oids.certBag });
  var pkeyBags = p12.getBags({ bagType: forge.pki.oids.pkcs8ShroudedKeyBag });
  // fetching certBag
  var certBag = certBags[forge.pki.oids.certBag][0];
  // fetching keyBag
  var keybag = pkeyBags[forge.pki.oids.pkcs8ShroudedKeyBag][0];
  // generate pem from private key
  var privateKeyPem = forge.pki.privateKeyToPem(keybag.key);
  // generate pem from cert
  var certificate = forge.pki.certificateToPem(certBag.cert);
  return privateKeyPem;
}

function getRequestTarget(epn, taxYear) {
  // 'post /v1/rest/rpn/{employerRegistrationNumber}/{taxYear}'
  return epn + '/' + taxYear;
}

function getSignatureString(hdr) {
  hdr.requestTarget = '(request-target): ' + hdr.requestTarget;
  hdr.host = 'Host: ' + hdr.host;
  hdr.date = 'Date: ' + hdr.date;
  hdr.contentType = 'Content-Type: ' + hdr.contentType;
  hdr.digest = 'Digest: ' + hdr.digest;

  return (
    hdr.requestTarget +
    '\n' +
    hdr.host +
    '\n' +
    hdr.date +
    '\n' +
    hdr.contentType +
    '\n' +
    hdr.digest
  );
}

// src: http://stackoverflow.com/a/3745677/3181933
function hex2a(hexx) {
  var hex = hexx.toString(); //force conversion
  var str = '';
  for (var i = 0; i < hex.length; i += 2)
    str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
  return str;
}
