const md5 = require('md5');
const btoa = require('btoa');
var forge = require('node-forge');
var fs = require('fs');
var certs = require('./digital-certs/certs');

/*
Private key is extracted. 
We need to use it to sign the headers (which must be constructed first):

1. (request-target)
The `(request-target)` header field is a special header field in that its value is comprised of 2 HTTP headers. It is generated by concatenating the lowercase HTTP method, an ASCII space, and the
request path headers. See below for sample

(request-target): post /v1/rest/rpn/{ employerRegistrationNumber }/{taxYear}

2. host
www.ros.ie (is this the live host? )


3. date
*/

// Signature Header Components
var requestTarget;
var host;
var date;
var digest; // Mandatory for POST requests
var contentType; // Not mandatory per ROS, but is included in example from ROS
// var xHttpMethodOverride // See ROS docs on this, it might be required later

// Set the Header component values

//https://softwaretest.ros.ie/paye-employers/v1/rest/rpn/{employerRegistrationNumber}/{taxYear}

requestTarget = getRequestTarget('', 2018);
host = 'www.ros.ie';

console.log(requestTarget);
console.log(host);

// Fetch the digital certificate from the certs array

var cert = certs.find(c => c.id == '999963666'); // or 999963665

console.log(cert.id);
console.log(cert.epn);
console.log(cert.password);

// Get the private key from the cert

// Get the MD5 hash of the password
var hashed = btoa(hex2a(md5(cert.password))); // md5 src: https://stackoverflow.com/a/33486055/7519287

// console.log(hashed);

var pk = extractPrivateKey(hashed, cert.id);

// console.log(pk);

// scr: https://stackoverflow.com/questions/37833952/getting-the-private-key-from-p12-file-using-javascript
function extractPrivateKey(pwd, certId) {
  var keyFile = fs.readFileSync('digital-certs/' + certId + '.p12');
  var keyBase64 = keyFile.toString('base64');

  var p12Der = forge.util.decode64(keyBase64);

  var p12Asn1 = forge.asn1.fromDer(p12Der);
  var p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, pwd);
  //https://stackoverflow.com/questions/17182848/best-approch-to-decode-the-pkcs12-file-and-get-the-encrypted-private-key-from-it
  // get bags by type
  var certBags = p12.getBags({ bagType: forge.pki.oids.certBag });
  var pkeyBags = p12.getBags({ bagType: forge.pki.oids.pkcs8ShroudedKeyBag });
  // fetching certBag
  var certBag = certBags[forge.pki.oids.certBag][0];
  // fetching keyBag
  var keybag = pkeyBags[forge.pki.oids.pkcs8ShroudedKeyBag][0];
  // generate pem from private key
  var privateKeyPem = forge.pki.privateKeyToPem(keybag.key);
  // generate pem from cert
  var certificate = forge.pki.certificateToPem(certBag.cert);
  return privateKeyPem;
}

function getRequestTarget(epn, taxYear) {
  // 'post /v1/rest/rpn/{employerRegistrationNumber}/{taxYear}'
  return 'post /v1/rest/rpn/' + epn + '/' + taxYear;
}

// src: https://stackoverflow.com/a/3745677/3181933
function hex2a(hexx) {
  var hex = hexx.toString(); //force conversion
  var str = '';
  for (var i = 0; i < hex.length; i += 2)
    str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
  return str;
}
