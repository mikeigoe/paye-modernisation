const md5 = require('md5');
const btoa = require('btoa');
var forge = require('node-forge');
var fs = require('fs');
var certs = require('./digital-certs/certs');
var https = require('https');
var sign = require('./sign');

/*
Private key is extracted. 
We need to use it to sign the headers (which must be constructed first):

1. (request-target)
The `(request-target)` header field is a special header field in that its value is comprised of 2 HTTP headers. It is generated by concatenating the lowercase HTTP method, an ASCII space, and the
request path headers. See below for sample

(request-target): post /v1/rest/rpn/{ employerRegistrationNumber }/{taxYear}

2. host
www.ros.ie (is this the live host? or https://softwaretest.ros.ie/paye-employers)

3. date

4. Digest

The ‘Digest’ HTTP header is created using the POST body/payload. The payload should be
converted to a byte array, hashed using the SHA-512 algorithm and finally base64 encoded before
adding it as a HTTP header.
*/

// Signature String Components

var body;
var signingString; // string to be signed consists of all the above headers fields
var signature;

// Fetch the digital certificate from the certs array

var cert = certs.find(c => c.id == '999963666'); // or 999963665

// console.log(cert.id + ' ' + cert.epn);

// Set the Header component values

//HTTP://softwaretest.ros.ie/paye-employers/v1/rest/rpn/{employerRegistrationNumber}/{taxYear}
/*
header.requestTarget = '/paye-employers/v1/rest/rpn/' + cert.epn + 2018;
header.method = 'GET';
header.path = header.requestTarget;

header.host = 'softwaretest.ros.ie';
header.date = new Date().toUTCString();
header.contentType = 'application/json;charset=UTF-8';
header.protocol = 'https:';
header.method = 'GET';

if (header.method == 'GET') {
  // Digest is derived from the payload, only applies to requests of type POST
  header.digest = '';
  // If request is of type POST Digest is derived from the POST body/payload, so we need to build that before we add signature to the header
}
*/

var headers = {
  // Method: 'GET',
  // Path: '/v1/rest/rpn/' + cert.epn + '/' + 2018,
  Host: 'softwaretest.ros.ie',
  Date: new Date().toUTCString(),
  'Content-Type': 'application/json;charset=UTF-8',
  Signature: ''
};

body = {};

var method = 'POST';
// var target = '/paye-employers/v1/rest/rpn' + cert.epn + '/' + 2018;
var target = '/v1/rest/rpn/' + cert.epn + '/' + 2018;

// Get the MD5 hash of the password
var hashedPwd = sign.getMd5Hash(cert.password);

// Get the details from the cert

var keys = sign.extractKeys(hashedPwd, cert.id);

if (method === 'POST') {
  headers.Digest = sign.getDigest(body, keys.privateKey);
}

signingString = sign.getSigningString(headers, method, target, body);
console.log(signingString);

// Get the HTTP Signature Header

var signatureHeader = sign.getHttpSignatureHeader(
  signingString,
  keys.privateKey,
  keys.publicKey,
  keys.certificate
);

headers.Signature = signatureHeader;

// md5 src: https://stackoverflow.com/a/33486055/7519287

// console.log(hashed);
var options = {
  hostname: 'softwaretest.ros.ie',
  // path: target,
  path:
    '/paye-employers/v1/rest/rpn/8000135UH/2019?softwareUsed=SOftwareABC&softwareVersion=1',
  //method: 'GET',
  headers: headers,
  body: body
};

console.log(options);

if (method === 'GET') {
  https
    .get(options, res => {
      let data = '';
      console.log('STATUS: ' + res.statusCode);
      console.log('HEADERS: ' + JSON.stringify(res.headers));
      res.setEncoding('utf8');
      res.on('data', function(chunk) {
        console.log('BODY: ' + chunk);
      });
      // A chunk of data has been recieved.
      // res.on('data', chunk => {
      //   console.log('Receiving:' + chunk);
      //   data += chunk;
      // });

      // The whole response has been received. Print out the result.
      res.on('end', () => {
        console.log('Returned:' + data);
      });
    })
    .on('error', err => {
      console.log('Error: ' + err.message);
    });
} else if (method === 'POST') {
  var postOptions = {
    hostname: 'softwaretest.ros.ie',
    path:
      '/paye-employers/v1/rest/rpn/8000135UH/2019?softwareUsed=SOftwareABC&softwareVersion=1',
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    }
  };

  var req = https.request(postOptions, res => {
    console.log('statusCode:', res.statusCode);
    console.log('headers:', res.headers);

    res.on('data', d => {
      console.log(d);
    });
  });

  req.on('error', e => {
    console.log(e);
  });

  req.write(body);
  req.end();
}

// 'https://softwaretest.ros.ie/paye-employers/v1/rest/rpn/8000135UH/2018'
//* uncomment this for testing, don't want to send request to revenue on every save
/*/

/*
var y = https.request('https://softwaretest.ros.ie/paye-employers/v1/rest/rpn/8000135UH/2018', function(res){
  console.log("Connected");
  res.on('data',function(data){
    console.log(data);
  });
});
/*
var x = https.request(header,function(res){
  console.log("Connected");
  res.on('data',function(data){
    console.log(data);
  });
});
x.end();
*/
// console.log(pk);
